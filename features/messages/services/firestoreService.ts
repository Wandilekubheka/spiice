import { db } from "@/firebase";
import { Conversation, Message } from "../@types/messages";
import { addDocToDatabse } from "@/service/firestoreServices";
import {
  addDoc,
  collection,
  getDocs,
  onSnapshot,
  orderBy,
  query,
  Timestamp,
  where,
} from "firebase/firestore";
import { UserModel } from "@/@types/userModel";
import { measure } from "react-native-reanimated";

const sendMessage = async (content: Message, conversationId: string) => {
  try {
    const messagesCollection = collection(
      db,
      "messages",
      conversationId,
      "messages"
    );
    await addDoc(messagesCollection, content);

    console.log("Message sent successfully");
  } catch (error) {
    console.error("Error sending message:", error);
    throw new Error("Failed to send message");
  }
};

const getMessages = async (
  conversationId: string,
  setMessages: (messages: Message[]) => void
) => {
  const messagesRef = collection(db, "messages", conversationId, "messages");
  const q = query(messagesRef, orderBy("timestamp", "asc"));

  let _messages: Message[] = [];

  const unsubscribe = onSnapshot(q, (snapshot) => {
    _messages = snapshot.docs.map((doc) => {
      const data = doc.data() as Message;
      const timestamp: any = data.timestamp; // Firestore Timestamp
      const date: string = timestamp.toDate().toLocaleTimeString(); // JS Date object
      data.timestamp = date; // Convert to Date object

      return {
        ...data,
      };
    });
    setMessages(_messages);
  });

  return {
    unsubscribe,
  };
};
const getConversationsList = async (
  userId: string,
  setConversations: (
    conversations: { docID: string; value: Conversation }[]
  ) => void
) => {
  try {
    const q = query(
      collection(db, "conversations"),
      where("participantsUid", "array-contains", userId)
    );
    const unsubscribe = onSnapshot(q, (snapshot) => {
      const conv: { docID: string; value: Conversation }[] = snapshot.docs.map(
        (doc) => {
          const docID = doc.id; // Get the document ID
          const data = doc.data() as Conversation;

          return {
            docID: docID,
            value: data,
          };
        }
      );
      setConversations(conv);
    });

    return { unsubscribe };
  } catch (error) {
    console.error("Error fetching conversations:", error);
    throw new Error("Failed to fetch conversations");
  }
};

const createConversation = async (
  participants: UserModel[],
  message: string
) => {
  try {
    const newConversation: Conversation = {
      // Unique ID will be generated by Firestore
      participants: participants,
      lastMessage: message,
      lastSender: "me",
      participantsUid: [participants[0].uid, participants[1].uid], // Array of user IDs of the participants
    };
    const docid = await addDocToDatabse(newConversation, "conversations");
    const messageData: Message = {
      conversationId: docid,
      senderId: participants[0].uid, // first participant is conversation creator
      content: message,
      timestamp: new Date(),
      isRead: false,
    };
    await sendMessage(messageData, docid);
  } catch (error: any) {
    console.error("Error creating conversation:", error);
    throw new Error(error);
  }
};

export { sendMessage, getMessages, getConversationsList, createConversation };
