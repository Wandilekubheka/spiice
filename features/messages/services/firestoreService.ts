import { db } from "@/firebase";
import { Conversation, Message } from "../@types/messages";
import {
  addDocToDatabse,
  getdocFromDatabase,
} from "@/service/firestoreServices";
import { addDoc, collection, getDocs, query, where } from "firebase/firestore";
import { UserModel } from "@/@types/userModel";
import { use } from "react";

const sendMessage = async (
  content: string,
  senderId: string,
  conversationId: string
) => {
  try {
    const newMessage: Message = {
      conversationId, // Replace with actual conversation ID
      senderId,
      content,
      timestamp: new Date(), // Use current date and time
      isRead: false, // Default to false when sending a new message
    };
    // Add the message to the "messages" collection
    await addDocToDatabse(newMessage, conversationId);

    console.log("Message sent successfully");
  } catch (error) {
    console.error("Error sending message:", error);
  }
};

const getMessages = async (conversationId: string) => {
  try {
    const docSnap = await getDocs(
      query(
        collection(db, "messages"),
        where("conversationId", "==", conversationId)
      )
    );
    let messages: Message[] = [];
    if (docSnap.empty) {
      console.log("No messages found for this conversation.");
      return messages; // Return empty array if no messages found
    }
    docSnap.forEach((doc) => {
      const messageData = doc.data() as Message;
      messages.push(messageData);
    });
    return messages;
  } catch (error) {
    console.error("Error fetching messages:", error);
    throw new Error("Failed to fetch messages");
  }
};

const getConversationsList = async (userId: string) => {
  try {
    const docSnap = await getDocs(
      query(
        collection(db, "conversations"),
        where("participantsUid", "array-contains", userId)
      )
    );
    let conversations: { docId: string; value: Conversation }[] = [];
    if (docSnap.empty) {
      console.log("No conversations found for this user.");
      return conversations; // Return empty array if no conversations found
    }
    docSnap.forEach((doc) => {
      const conversationData = doc.data() as Conversation;

      conversations.push({ docId: doc.id, value: conversationData });
    });
    return conversations;
  } catch (error) {
    console.error("Error fetching conversations:", error);
    throw new Error("Failed to fetch conversations");
  }
};

const createConversation = async (
  participants: UserModel[],
  message: string
) => {
  try {
    const messageData: Message = {
      conversationId: "",
      senderId: participants[0].uid, // first participant is conversation creator
      content: message,
      timestamp: new Date(),
      isRead: false,
    };
    const newConversation: Conversation = {
      // Unique ID will be generated by Firestore
      participants: participants,
      lastMessage: message,
      lastSender: "me",
      participantsUid: [participants[0].uid, participants[1].uid], // Array of user IDs of the participants
    };
    const docid = await addDocToDatabse(newConversation, "conversations");
    messageData.conversationId = docid; // Set the conversation ID in the message
    const messagesCollection = collection(db, "messages", docid, "messages");
    await addDoc(messagesCollection, messageData);
    console.log("Conversation created successfully");
  } catch (error: any) {
    console.error("Error creating conversation:", error);
    throw new Error(error);
  }
};

export { sendMessage, getMessages, getConversationsList, createConversation };
